@page "/"
@inject DBContext Cnn
@inject IJSRuntime js  
@implements IDisposable

<h1>Subir Imagenes</h1>

<p>@Messages</p>

<InputFileExtended @ref="UploadFiles"                   
                   TargetToPostFile="files/a/disco" ShowPreview="false" IsImage="true" ButtonShow="show"
                   OnSave="Guardar" OnError="Error" OnUploadedFile="UploadFile" OnUploadComleted="Completed" 
                   MultiFile="false">
    <ButtonContent>Guardar</ButtonContent>
</InputFileExtended>


<button class="btn btn-success" type="button" @onclick="Pay">Pay here</button>

<div id="paypal-button-container"></div>
<ul class="gallery">

    @if (Files is null)
    {
        <li>Gallery loading...</li>
    }
    else if (Files.Any())
    {
        foreach (var file in Files)
        {
            <li>
                <div class="row">
                    <div class="col image">
                        <img src="@file.FileBytes" class="img-fluid" />
                        <div class="data">
                            <span class="file-id"><strong>File Id: </strong>@file.Id</span>
                            <span>Name: @file.FileName</span>
                        </div>
                        <span class="btn btn-outline-danger" @onclick="() => Remove(file.Id)">X</span>
                    </div>
                </div>
            </li>
        }
    }
    else
    {
        <li>Gallery is empty.</li>
    }
</ul>

@code{ 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("LocadPaypal", 500, 50);
        }
    }


    async void Pay()
    {
        await js.InvokeVoidAsync("LocadPaypal", 100, 10);
        StateHasChanged();
    }

    bool show = false;

    void ShowDiallog()
    {
        show = true;
    }

    string Messages;

    List<FileStore> Files;
    InputFileExtended UploadFiles;

    void Guardar(HttpResponseMessage result)
    {
        if (result.IsSuccessStatusCode)
        {
            show = false;
            Messages = "Imagen subida.";
        }
        else
        {
            Messages = "No se pudo subir.";
        }
        AddToDb();
    }

    async void AddToDb()
    {
        FileStore file = new FileStore();

        foreach (var File in UploadFiles.Files)
        {
            file.Id = File.FileId.ToString();
            file.FileName = File.Name;
            file.FileSize = File.Size;
            file.FileBytes = File.ToImageHTML;
            CommandResponse response = await Cnn.FilesStore.AddAsync(file);
            if (response.Result)
            {
                Messages += $" Imagen {File.Name} guardada en la base de datos local. Resultado perfecto.";
            }
            else Messages += $" Imagen {File.Name} no se pudo guardar en la base de datos local {response.Message}. Resultado casi perfecto.";
        }

        await LoadGallery();
        UploadFiles.Clean();
        StateHasChanged();
    }

    void Completed(FilesUploadEventArgs e)
    {
        Messages = $"{e.Count} files with total {e.Size} bytes {e.Action}";
    }

    void UploadFile(FileUploadEventArgs e)
    {
        Messages = $"File {e.File.Name} with size {e.File.Size} {e.Action}";
        show = true;
    }

    void Error(ArgumentException e)
    {
        Messages = e.Message;
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadGallery();
    }

    async Task LoadGallery()
    {
        Files = await Cnn.FilesStore.SelectAsync();
    }

    async void Remove(string id)
    {
        CommandResponse response = await Cnn.FilesStore.DeleteAsync(id);
        if (response.Result) Messages = $"File {id} deleted";
        else Messages = $"Can't delete file {id}";
        await LoadGallery();
        StateHasChanged();
    }

    async void IDisposable.Dispose()
    {
        Console.WriteLine("haciendo dispose");
        await js.InvokeVoidAsync("alert", "adios");
        UploadFiles?.Dispose();
        Console.WriteLine("finalizando dispose");
    }

}